{
	"env": {
		"browser": false,
		"node": true,
		"es6": true
	},
	"globals": {
	},
	"rules": {
		"valid-jsdoc": ["error", {
			"requireReturn": false,
			"requireReturnType": true,
			"matchDescription": ".+",
			"requireParamDescription": false
		}],
		"no-cond-assign": "error", // disallow assignment operators in conditional expressions
		"no-console": "error", // disallow the use of console
		"no-constant-condition": "error", // disallow constant expressions in conditions
		"no-control-regex": "error", // disallow control characters in regular expressions
		"no-debugger": "error", // disallow the use of debugger
		"no-dupe-args": "error", // disallow duplicate arguments in function definitions
		"no-dupe-keys": "error", // disallow duplicate keys in object literals
		"no-duplicate-case": "error", // disallow duplicate case labels
		"no-empty-character-class": "error", // disallow empty character classes in regular expressions
		"no-empty": "error", // disallow empty block statements
		"no-ex-assign": "error", // disallow reassigning exceptions in catch clauses
		"no-extra-boolean-cast": "error", // disallow unnecessary boolean casts
		"no-extra-parens": "error", // disallow unnecessary parentheses
		"no-extra-semi": "error", // disallow unnecessary semicolons
		"no-func-assign": "error", // disallow reassigning function declarations
		"no-inner-declarations": "error", // disallow function or var declarations in nested blocks
		"no-invalid-regexp": "error", // disallow invalid regular expression strings in RegExp constructors
		"no-irregular-whitespace": "error", // disallow irregular whitespace outside of strings and comments
		"no-negated-in-lhs": "error", // disallow negating the left operand in in expressions
		"no-obj-calls": "error", // disallow calling global object properties as functions
		"no-prototype-builtins": "error", // disallow calling some Object.prototype methods directly on objects
		"no-regex-spaces": "error", // disallow multiple spaces in regular expressions
		"no-sparse-arrays": "error", // disallow sparse arrays
		"no-unexpected-multiline": "error", // disallow confusing multiline expressions
		"no-unreachable": "error", // disallow unreachable code after return, throw, continue, and break statements
		"no-unsafe-finally": "error", // disallow control flow statements in finally blocks
		"use-isnan": "error", // require calls to isNaN() when checking for NaN
		"valid-typeof": "error", // enforce comparing typeof expressions against valid strings
		"accessor-pairs": "error", // enforce getter and setter pairs in objects
		"array-callback-return": "error", // enforce return statements in callbacks of array methods
		"block-scoped-var": "error", // enforce the use of variables within the scope they are defined
		"complexity": "error", // enforce a maximum cyclomatic complexity allowed in a program
		"consistent-return": "error", // require return statements to either always or never specify values
		"curly": "error", // enforce consistent brace style for all control statements
		"default-case": "error", // require default cases in switch statements
		"dot-location": ["error", "property"], // enforce consistent newlines before and after dots
		"dot-notation": "error", // enforce dot notation whenever possible
		"eqeqeq": ["error", "allow-null"], // require the use of === and !==
		"guard-for-in": "error", // require for-in loops to include an if statement
		"no-alert": "error", // disallow the use of alert, confirm, and prompt
		"no-caller": "error", // disallow the use of arguments.caller or arguments.callee
		"no-case-declarations": "error", // disallow lexical declarations in case clauses
		"no-div-regex": "error", // disallow division operators explicitly at the beginning of regular expressions
		"no-else-return": "error", // disallow else blocks after return statements in if statements
		"no-empty-function": "off", // disallow empty functions
		"no-empty-pattern": "error", // disallow empty destructuring patterns
		"no-eq-null": "off", // disallow null comparisons without type-checking operators
		"no-eval": "error", // disallow the use of eval()
		"no-extend-native": "error", // disallow extending native types
		"no-extra-bind": "error", // disallow unnecessary calls to .bind()
		"no-extra-label": "error", // disallow unnecessary labels
		"no-fallthrough": "error", // disallow fallthrough of case statements
		"no-floating-decimal": "error", // disallow leading or trailing decimal points in numeric literals
		"no-implicit-coercion": "error", // disallow shorthand type conversions
		"no-implicit-globals": "error", // disallow var and named function declarations in the global scope
		"no-implied-eval": "error", // disallow the use of eval()-like methods
		"no-invalid-this": "off", // disallow this keywords outside of classes or class-like objects
		"no-iterator": "error", // disallow the use of the __iterator__ property
		"no-labels": "error", // disallow labeled statements
		"no-lone-blocks": "error", // disallow unnecessary nested blocks
		"no-loop-func": "error", // disallow function declarations and expressions inside loop statements
		"no-magic-numbers": "off", // disallow magic numbers
		"no-multi-spaces": "error", // disallow multiple spaces
		"no-multi-str": "error", // disallow multiline strings
		"no-native-reassign": "error", // disallow assignments to native objects or read-only global variables
		"no-new-func": "error", // disallow new operators with the Function object
		"no-new-wrappers": "error", // disallow new operators with the String, Number, and Boolean objects
		"no-new": "error", // disallow new operators outside of assignments or comparisons
		"no-octal-escape": "error", // disallow octal escape sequences in string literals
		"no-octal": "error", // disallow octal literals
		"no-param-reassign": "off", // disallow reassigning function parameters
		"no-proto": "error", // disallow the use of the __proto__ property
		"no-redeclare": "error", // disallow var redeclaration
		"no-return-assign": "error", // disallow assignment operators in return statements
		"no-script-url": "error", // disallow javascript: urls
		"no-self-assign": "error", // disallow assignments where both sides are exactly the same
		"no-self-compare": "error", // disallow comparisons where both sides are exactly the same
		"no-sequences": "error", // disallow comma operators
		"no-throw-literal": "error", // disallow throwing literals as exceptions
		"no-unmodified-loop-condition": "error", // disallow unmodified loop conditions
		"no-unused-expressions": "error", // disallow unused expressions
		"no-unused-labels": "error", // disallow unused labels
		"no-useless-call": "error", // disallow unnecessary calls to .call() and .apply()
		"no-useless-concat": "error", // disallow unnecessary concatenation of literals or template literals
		"no-useless-escape": "error", // disallow unnecessary escape characters
		"no-void": "error", // disallow void operators
		"no-warning-comments": "warn", // disallow specified warning terms in comments
		"no-with": "error", // disallow with statements
		"radix": ["error", "as-needed"], // enforce the consistent use of the radix argument when using parseInt()
		"vars-on-top": "off", // require var declarations be placed at the top of their containing scope
		"wrap-iife": "error", // require parentheses around immediate function invocations
		"yoda": "error", // require or disallow “Yoda” conditions
		"strict": "off", // require or disallow strict mode directives
		"init-declarations": "off", // require or disallow initialization in var declarations
		"no-catch-shadow": "error", // disallow catch clause parameters from shadowing variables in the outer scope
		"no-delete-var": "error", // disallow deleting variables
		"no-label-var": "error", // disallow labels that share a name with a variable
		"no-restricted-globals": "error", // disallow specified global variables
		"no-shadow-restricted-names": "error", // disallow identifiers from shadowing restricted names
		"no-shadow": "error", // disallow var declarations from shadowing variables in the outer scope
		"no-undef-init": "error", // disallow initializing variables to undefined
		"no-undef": "error", // disallow the use of undeclared variables unless mentioned in /*global */ comments
		"no-undefined": "error", // disallow the use of undefined as an identifier
		"no-unused-vars": ["error", {
			"vars": "all",
			"args": "none",
            "varsIgnorePattern": "[_]"
		}], // disallow unused variables
		"no-use-before-define": ["error", "nofunc"], // disallow the use of variables before they are defined
		"callback-return": "error", // require return statements after callbacks
		"global-require": "warn", // require require() calls to be placed at top-level module scope
		"handle-callback-err": "error", // require error handling in callbacks
		"no-mixed-requires": "error", // disallow require calls to be mixed with regular var declarations
		"no-new-require": "error", // disallow new operators with calls to require
		"no-path-concat": "error", // disallow string concatenation with __dirname and __filename
		"no-process-env": "off", // disallow the use of process.env
		"no-process-exit": "off", // disallow the use of process.exit()
		"no-restricted-modules": "error", // disallow specified modules when loaded by require
		"no-sync": "warn", // disallow synchronous methods
		"array-bracket-spacing": "error", // enforce consistent spacing inside array brackets
		"block-spacing": "error", // enforce consistent spacing inside single-line blocks
		"brace-style": ["error", "stroustrup", { "allowSingleLine": true }], // enforce consistent brace style for blocks
		"camelcase": "warn", // enforce camelcase naming convention
		"comma-dangle": ["error", "only-multiline"], // require or disallow trailing commas
		"comma-spacing": "error", // enforce consistent spacing before and after commas
		"comma-style": "error", // enforce consistent comma style
		"computed-property-spacing": "error", // enforce consistent spacing inside computed property brackets
		"consistent-this": "error", // enforce consistent naming when capturing the current execution context
		"eol-last": "error", // enforce at least one newline at the end of files
		"func-names": ["error", "never"], // require or disallow named function expressions
		"func-style": "off", // enforce the consistent use of either function declarations or expressions
		"id-blacklist": "error", // disallow specified identifiers
		"id-length": ["off", {
			"exceptions": ["_"]
		}], // enforce minimum and maximum identifier lengths
		"id-match": "error", // require identifiers to match a specified regular expression
		"indent": ["error", 4], // enforce consistent indentation
		"jsx-quotes": "error", // enforce the consistent use of either double or single quotes in JSX attributes
		"key-spacing": "error", // enforce consistent spacing between keys and values in object literal properties
		"keyword-spacing": "error", // enforce consistent spacing before and after keywords
		"linebreak-style": "error", // enforce consistent linebreak style
		"lines-around-comment": "off", // require empty lines around comments
		"max-depth": "error", // enforce a maximum depth that blocks can be nested
		"max-len": ["error", 150], // enforce a maximum line length
		"max-lines": "error", // enforce a maximum number of lines per file
		"max-nested-callbacks": "error", // enforce a maximum depth that callbacks can be nested
		"max-params": ["warn", 5], // enforce a maximum number of parameters in function definitions
		"max-statements-per-line": "error", // enforce a maximum number of statements allowed per line
		"max-statements": ["error", 20], // enforce a maximum number of statements allowed in function blocks
		"multiline-ternary": "error", // enforce newlines between operands of ternary expressions
		"new-cap": "off", // require constructor function names to begin with a capital letter
		"new-parens": "error", // require parentheses when invoking a constructor with no arguments
		"newline-after-var": "off", // require or disallow an empty line after var declarations
		"newline-before-return": "off", // require an empty line before return statements
		"newline-per-chained-call": "off", // require a newline after each call in a method chain
		"no-array-constructor": "error", // disallow Array constructors
		"no-bitwise": "error", // disallow bitwise operators
		"no-continue": "error", // disallow continue statements
		"no-inline-comments": "off", // disallow inline comments after code
		"no-lonely-if": "error", // disallow if statements as the only statement in else blocks
		"no-mixed-operators": "error", // disallow mixed binary operators
		"no-mixed-spaces-and-tabs": "error", // disallow mixed spaces and tabs for indentation
		"no-multiple-empty-lines": "error", // disallow multiple empty lines
		"no-negated-condition": "error", // disallow negated conditions
		"no-nested-ternary": "error", // disallow nested ternary expressions
		"no-new-object": "error", // disallow Object constructors
		"no-plusplus": "off", // disallow the unary operators ++ and --
		"no-restricted-syntax": "error", // disallow specified syntax
		"no-spaced-func": "error", // disallow spacing between function identifiers and their applications
		"no-ternary": "error", // disallow ternary operators
		"no-trailing-spaces": "error", // disallow trailing whitespace at the end of lines
		"no-underscore-dangle": "off", // disallow dangling underscores in identifiers
		"no-unneeded-ternary": "error", // disallow ternary operators when simpler alternatives exist
		"no-whitespace-before-property": "error", // disallow whitespace before properties
		"object-curly-newline": "off", // enforce consistent line breaks inside braces
		"object-curly-spacing": "off", // enforce consistent spacing inside braces
		"object-property-newline": "error", // enforce placing object properties on separate lines
		"one-var-declaration-per-line": "error", // require or disallow newlines around var declarations
		"one-var": "off", // enforce variables to be declared either together or separately in functions
		"operator-assignment": "error", // require or disallow assignment operator shorthand where possible
		"operator-linebreak": "error", // enforce consistent linebreak style for operators
		"padded-blocks": "off", // require or disallow padding within blocks
		"quote-props": ["error", "as-needed"], // require quotes around object literal property names
		"quotes": ["error", "double", "avoid-escape"], // enforce the consistent use of either backticks, double, or single quotes
		"require-jsdoc": "off", // require JSDoc comments
		"semi-spacing": ["error", { "before": false, "after": true }], // enforce consistent spacing before and after semicolons
		"semi": "error", // require or disallow semicolons instead of ASI
		"sort-vars": "error", // require variables within the same declaration block to be sorted
		"space-before-blocks": "error", // enforce consistent spacing before blocks
		"space-before-function-paren": ["error", "never"], // enforce consistent spacing before function definition opening parenthesis
		"space-in-parens": ["error", "never"], // enforce consistent spacing inside parentheses
		"space-infix-ops": "error", // require spacing around operators
		"space-unary-ops": "error", // enforce consistent spacing before or after unary operators
		"spaced-comment": "error", // enforce consistent spacing after the // or /* in a comment
		"unicode-bom": "error", // require or disallow Unicode byte order mark (BOM)
		"wrap-regex": "error", // require parenthesis around regex literals
		"arrow-body-style": "off", // require braces around arrow function bodies
		"arrow-parens": "error", // require parentheses around arrow function arguments
		"arrow-spacing": "error", // enforce consistent spacing before and after the arrow in arrow functions
		"constructor-super": "error", // require super() calls in constructors
		"generator-star-spacing": "error", // enforce consistent spacing around * operators in generator functions
		"no-class-assign": "error", // disallow reassigning class members
		"no-confusing-arrow": "error", // disallow arrow functions where they could be confused with comparisons
		"no-const-assign": "error", // disallow reassigning const variables
		"no-dupe-class-members": "error", // disallow duplicate class members
		"no-duplicate-imports": "error", // disallow duplicate module imports
		"no-new-symbol": "error", // disallow new operators with the Symbol object
		"no-restricted-imports": "error", // disallow specified modules when loaded by import
		"no-this-before-super": "error", // disallow this/super before calling super() in constructors
		"no-useless-computed-key": "error", // disallow unnecessary computed property keys in object literals
		"no-useless-constructor": "error", // disallow unnecessary constructors
		"no-useless-rename": "error", // disallow renaming import, export, and destructured assignments to the same name
		"no-var": "error", // require let or const instead of var
		"object-shorthand": "off", // require or disallow method and property shorthand syntax for object literals
		"prefer-arrow-callback": "error", // require arrow functions as callbacks
		"prefer-const": "error", // require const declarations for variables that are never reassigned after declared
		"prefer-reflect": "error", // require Reflect methods where applicable
		"prefer-rest-params": "error", // require rest parameters instead of arguments
		"prefer-spread": "error", // require spread operators instead of .apply()
		"prefer-template": "error", // require template literals instead of string concatenation
		"require-yield": "error", // require generator functions to contain yield
		"rest-spread-spacing": "error", // enforce spacing between rest and spread operators and their expressions
		"sort-imports": "error", // enforce sorted import declarations within modules
		"template-curly-spacing": "error", // require or disallow spacing around embedded expressions of template strings
		"yield-star-spacing": "error" // require or disallow spacing around the * in yield* expressions

	}
}
